#+TITLE: README
#+AUTHOR: GuangTao Zhang
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2023-05-14 Sun 15:19


Using graphs to describe infrastructure and architecture is a consensus, but which method is the best choice has been debated so far. [[https://diagrams.mingrammer.com/docs/getting-started/examples][Python Diagrams As Infra]] provides a more simple way, but d2 has a powerful DSL and [[https://terrastruct.com/d2-studio/][d2-studio]] for editing/viewing.


* Diagram Tools

It seems that d2 and python should be the best choices, with complete ecosystem, powerful DSL and simple operation/APIs.

** d2
- https://d2lang.com/
- https://play.d2lang.com/
** graphviz
- dotsk
https://medium.com/@zeruhur/making-sketchy-diagrams-on-your-local-machine-903d13e20a13
** ilograph
- https://www.ilograph.com/

news & thoughts:
https://www.ilograph.com/blog/posts/its-time-to-drop-drag-and-drop-diagram-tools/

** https://structurizr.com/
* Database As Code

After I tried to use [[https://github.com/GTrunSec/matrix-attack-data/tree/main/data][matrix-attack-data]] to generate various data formats, I realized that I needed a visual document that could clearly describe the relationship between mixed data and help me audit the data type and make modifications (such as vast-query, data-schema, queryLang). Secondly, I also hope to be able to import metadata like mitre-attack/[[https://github.com/swimlane/pyattck/tree/master][pyattack]] into such documents to help me think about how to build a valid data model. (workflow: use the d2 to draw an [[https://github.com/center-for-threat-informed-defense/attack-flow][attack-flow]](), then use that dbdocs to build the metadata for querying and reviewing)

- https://dbdocs.io/
- https://dbterd.datnguyen.de/1.2/nav/guide/targets/generate-dbml.html

* Chatgpt

#+begin_src chatgpt-shell
Can you list the advantages and disadvantages of drawing tools such as d2, structurizr, Python diagrams, and ilograph?
#+end_src

#+RESULTS:
Sure, here are the advantages and disadvantages of each tool you mentioned:

1. D2:
Advantages:
- Provides extensive customizations for visual elements
- Supports various types of diagrams, including ER diagrams, flowcharts, and network diagrams
- Offers collaboration features such as sharing and commenting on diagrams

Disadvantages:
- Steep learning curve due to its complex interface
- Doesn't offer many templates or pre-built shapes, which can be time-consuming for beginners

2. Structurizr:
Advantages:
- Offers a clean and simple interface with easy-to-navigate features
- Provides a clear and concise way to visualize software architecture diagrams
- Maintains diagrams' consistency due to its automated syncing system

Disadvantages:
- Limited customization options
- Requires structured data input, which can be difficult for beginners.

3. Python Diagrams:
Advantages:
- Python diagrams have a simple syntax that allows users to get started quickly
- Highly customizable and flexible
- Free and open source

Disadvantages:
- Lacks many templates or pre-built shapes, which can be time-consuming
- May not be suitable for complex diagrams due to the limitations of python libraries.

4. Ilograph:
Advantages:
- Provides an organized view of content in an interactive canvas environment
- Intuitive drag-and-drop interface
- Offers various templates and pre-built shapes for quick diagrams creation

Disadvantages:
- Doesn't offer many customization options for shapes (e.g., color, size)
- The free version offers limited features

Overall, the choice of drawing tool depends on your specific requirements and preferences. Each tool has its own advantages and disadvantages, so it is important to evaluate which tool aligns best with your needs.
* Who use that?

- https://github.com/HariSekhon/Diagrams-as-Code
